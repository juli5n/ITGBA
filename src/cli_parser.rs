use std::path::PathBuf;
use clap::Parser;

#[derive(Parser)]
#[command(name = "ITGBA")]
#[command(version)]
#[command(about = "ImageToGameBoyAsset(ITGBA) takes a tileset (that contains a reference \
tile for palette order) and optionally additional tilemap images and generates a\
corresponding .c file that specifies the tileset, tile indices (and attribute arrays)\
for the supplied maps in the data format that the gameboy utilizes internally.")]
pub struct Cli_parser {
    /// Supply a tile map image (with 32 tiles in either dimension at maximum) 
    /// to generate tile indices for using the reference tileset. 
    /// The map's image may not contain x-flipped or y-flipped tiles, that aren't
    /// directly in the reference tileset. Only
    /// the GBC supports this via an additional (single) background-attributes
    /// map. To generate a tile-indices array together with an background-attributes array
    /// use the -mwa/-gbc_map_with_attributes parameter below instead.
    /// Tile indices in 32x32 that are outside the image boundaries will get the default 0 index.
    #[arg(short = 'm', long = "map", value_name = "path_list", num_args=1..)]
    pub map_file_paths: Vec<PathBuf>,

    /// Gameboy color maps to generate tile indices and background-attributes 
    /// information (including x-flip and y-flip) for. Non gb color-palletes aren't
    /// fully supported yet. Note that the GBC has designated space for tile indices of 2 32x32 maps
    /// in VRAM, but only one 32x32 byte attribute map for one of them.
    #[arg(long = "mwa", long = "gbc_map_with_attributes", value_name = "path_list", num_args=1..)]
    pub map_with_attributes_file_paths: Vec<PathBuf>,

    /// The first tile of the supplied image should contain the 4 colors used
    /// in the tileset in the top left corner at pixel indices (0,0) to (3,0).
    /// If a pixel in the rest of the image has the the same color as pixel (x,0), 
    /// it's palette index will get assigned to x. 
    /// If any map is supplied it should only use tiles from this reference tileset
    /// There is no support for multiple color palettes and this tool
    /// won't convert the supplied colors to GBC's 15-bit RGB colors either (at the moment).
    #[arg(short = 'r', long = "reference_tileset", value_name = "path", required = true)]
    pub reference_tileset_path: PathBuf,

    /// Use this flag if the generated output file(s) should use hex notation instead of the
    /// default binary notation. 
    // Binary was choosen as default since the pixels are represented
    // by two single bits in the generated bytes which are easier to read in binary.
    #[arg(long = "hex", value_name = "bool", default_value_t = false)]
    pub use_hex: bool,
    
    #[arg(short = 'o', long = "output_directory", value_name = "path")]
    pub output_directory: Option<PathBuf>,
}